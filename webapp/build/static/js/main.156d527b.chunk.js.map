{"version":3,"sources":["constants/APIUtil.js","service/Maps.js","screen/home/MapView.jsx","screen/home/ListObject.jsx","screen/home/ListView.jsx","screen/home/TemporaryDrawer.js","screen/home/BaseView.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["APIHOST","getNearbyFood","lat","lng","a","endpoint","axios","get","baseURL","API","headers","query","MapView","props","state","map","undefined","markers","geocoder","proximityRange","locationInput","React","createRef","mapView","changeProximity","bind","onGeocodeSuccess","window","initMap","onGMapsReady","google","maps","URL","script","document","createElement","src","async","body","appendChild","this","prevProps","prevState","snapshot","userSearchQuery","retrieveNearbyFoodPlaces","getNearbyFoodBySearch","then","result","forEach","marker","setMap","data","results","infoWindow","InfoWindow","content","name","Marker","animation","Animation","DROP","position","geometry","location","title","addListener","open","getMap","push","setState","nearbyFoodPlaces","onNearbyFoodPlacesChangeListener","className","ref","latLng","LatLng","Map","current","center","zoom","mapTypeControl","streetViewControl","fullscreenControl","Geocoder","autoComplete","places","Autocomplete","componentRestrictions","country","setFields","bindTo","navigator","geolocation","getCurrentPosition","console","log","newPlace","viewport","fitBounds","setCenter","setZoom","setPosition","markerRadius","geocode","place","types","reverseGeocode","addrComponentMap","set","addressComponents","address_components","i","length","addressComponentTypes","has","long_name","onLocationChange","status","resultAddrComponents","j","components","type","event","target","value","setRadius","parseInt","onProximityChange","proximityValue","coords","latitude","longitude","Component","ListObject","nearbyFoodPlace","rating","toFixed","Icon","style","fontSize","color","ListView","Fragment","Container","useStyles","makeStyles","theme","list","width","fullList","search","borderRadius","shape","backgroundColor","fade","palette","common","white","marginRight","spacing","marginLeft","breakpoints","up","searchIcon","height","pointerEvents","display","alignItems","justifyContent","inputInput","padding","transition","transitions","create","TemporaryDrawer","side","classes","useState","top","left","bottom","right","toggleDrawer","key","AppBar","class","IconButton","mx","edge","aria-label","onClick","Typography","InputBase","placeholder","inputProps","onChange","onUserSearchListener","Drawer","onClose","role","onKeyDown","List","text","index","ListItem","button","ListItemText","primary","BaseView","showList","userSearch","onNearbyFoodPlacesChange","onUserSearch","Fab","margin","searchString","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.156d527b.chunk.js","sourcesContent":["export const APIHOST = 'http://localhost:3001';\n\nexport const GOOGLEMAPS_BASE = 'https://maps.googleapis.com/maps/api/js';\n// TODO: Key will be retired by 31/12/2018\nexport const GOOGLEMAPS_KEY = \"AIzaSyB4satK4-ltTLZFf_HxR5-AABSIEYRxxiU\";\nexport const GOOGLEMAPS_LIB_PLACE = \"places\";","import axios from 'axios';\nimport * as API from '../constants/APIUtil';\n\nexport async function getNearbyFood(lat, lng) {\n    const endpoint = \"locations\" + \"/\" + \"getnearbyfood\" + \"/\" + \"latlong\" + \"/\" + lat + \",\" + lng;\n    return await axios.get(endpoint, {\n        baseURL: API.APIHOST,\n        headers: {'Content-Type': 'application/json'},\n    })\n}\n\nexport async function getNearbyFoodBySearch(query, lat, lng) {\n    const endpoint = \"locations\" + \"/\" + \"nearbycusine\" + \"/\" + \"cusine\" + \"/\" + query + \"/\" + \"latlong\" + \"/\" + lat + \",\" + lng;\n    return await axios.get(endpoint, {\n        baseURL: API.APIHOST,\n        headers: {'Content-Type': 'application/json'},\n    })\n}","import React from 'react';\nimport * as API from \"../../constants/APIUtil\";\nimport {getNearbyFood, getNearbyFoodBySearch} from \"../../service/Maps\";\n\n\n\nclass MapView extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = ({\n            lat: 1.352,\n            lng: 103.82,\n            map: undefined,\n            markers: [],\n            geocoder: undefined,\n\n            proximityRange: this.props.proximityRange || 50\n        });\n\n        this.locationInput = React.createRef();\n        this.mapView = React.createRef();\n\n        this.changeProximity = this.changeProximity.bind(this);\n        this.onGeocodeSuccess = this.onGeocodeSuccess.bind(this);\n    }\n\n    componentDidMount() {\n        // Setting up the callback\n        window.initMap = () => {this.onGMapsReady()};\n\n        // Check if GMaps script is already loaded\n        if(window.google === undefined || window.google.maps === undefined) {\n            // Adding GMaps API's script to body\n            // Asynchronously load script\n            const URL = `${API.GOOGLEMAPS_BASE}?key=${API.GOOGLEMAPS_KEY}&libraries=places&region=SG&callback=initMap`;\n            let script = document.createElement('script');\n            script.src = URL;\n            script.async = true;\n            document.body.appendChild(script);\n        } else {\n            this.onGMapsReady();\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(prevProps.userSearchQuery != this.props.userSearchQuery) {\n            if (this.props.userSearchQuery === \"\") {\n                this.retrieveNearbyFoodPlaces(this.state.lat, this.state.lng);\n            } else {\n                getNearbyFoodBySearch(this.props.userSearchQuery, this.state.lat, this.state.lng).then(result => {\n                    const markers = this.state.markers;\n                    markers.forEach((marker) => {\n                        marker.setMap(null);\n                    });\n\n                    result.data.results.forEach(result => {\n                        let infoWindow = new window.google.maps.InfoWindow({\n                            content: result.name\n                        });\n                        let marker = new window.google.maps.Marker({\n                            map: this.state.map,\n                            animation: window.google.maps.Animation.DROP,\n                            position: result.geometry.location,\n                            title: result.name,\n                        });\n                        marker.addListener('click', function() {\n                            infoWindow.open(marker.getMap(), marker);\n                        });\n                        markers.push(marker);\n                    });\n\n                    this.setState({\n                        markers: markers,\n                        nearbyFoodPlaces: result.data.results\n                    }, () => {\n                        this.props.onNearbyFoodPlacesChangeListener(result.data.results);\n                    })\n                });\n            }\n\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"mapContainer\">\n                <div ref={this.mapView} className=\"map\"/>\n            </div>\n        )\n    }\n\n\n\n    onGMapsReady() {\n        // The javascript object (google.maps) lives in the window object!\n        const latLng = new window.google.maps.LatLng(this.state.lat, this.state.lng);\n\n        let map = new window.google.maps.Map(this.mapView.current, {\n            center: latLng,\n            zoom: 12,\n            mapTypeControl: false,\n            streetViewControl: false,\n            fullscreenControl: false\n        });\n\n        let geocoder = new window.google.maps.Geocoder();\n\n\n        // Address Autocomplete Fields\n        let autoComplete = new window.google.maps.places.Autocomplete(this.locationInput.current, {\n            //Restricted to Singapore address only!\n            componentRestrictions: {country: 'sg'}\n        });\n        autoComplete.setFields(['address_components', 'geometry', 'types']);\n        autoComplete.bindTo('bounds', map);\n\n        /*autoComplete.addListener('place_changed', () => {\n            this.changeLocation(autoComplete.getPlace());\n        });*/\n\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition((position => this.onGeocodeSuccess(position)));\n        } else {\n            console.log(\"Geolocation is not supported by this browser.\");\n        }\n\n        this.setState({\n            map: map,\n            geocoder: geocoder,\n        });\n    }\n\n    changeLocation(newPlace) {\n        // Check for invalid places!\n        // Will return a place object with just a name field if invalid\n        if(newPlace.geometry) {\n            // Zoom in & Enhance map\n            if (newPlace.geometry.viewport) {\n                this.state.map.fitBounds(newPlace.geometry.viewport);\n            } else {\n                this.state.map.setCenter(newPlace.geometry.location);\n                this.state.map.setZoom(17);\n            }\n\n            // Set marker and radius to position\n            this.state.marker.setPosition(newPlace.geometry.location);\n            this.state.markerRadius.setCenter(newPlace.geometry.location);\n\n            this.geocode(newPlace);\n        }\n    }\n\n    geocode(place) {\n        //Try Singapore 123311 and be amazed\n        if(place.types[0] === 'postal_code') {\n            this.reverseGeocode(place.geometry.location);\n        } else {\n            let addrComponentMap = new Map();\n            addrComponentMap.set(\"street_number\", '');\n            addrComponentMap.set(\"route\", '');\n            addrComponentMap.set(\"postal_code\", '');\n            // These are the possible ways Google will return landmark name\n            addrComponentMap.set(\"premise\", '');\n            addrComponentMap.set(\"establishment\", '');\n            addrComponentMap.set(\"point_of_interest\", '');\n            let addressComponents = place.address_components;\n\n            for(let i = 0; i < addressComponents.length; i++) {\n                let addressComponentTypes = addressComponents[i].types;\n\n                if(addrComponentMap.has(addressComponentTypes[0])) {\n                    addrComponentMap.set(addressComponentTypes[0], addressComponents[i].long_name);\n                }\n            }\n\n            if(addrComponentMap.get(\"route\") === '') {\n                this.reverseGeocode(place.geometry.location);\n            } else {\n                this.onLocationChange(addrComponentMap, place.geometry.location);\n            }\n        }\n    }\n\n    reverseGeocode(location) {\n        this.state.geocoder.geocode({\n            'location': location\n        }, (results, status) => {\n            if(status === 'OK') {\n                let addrComponentMap = new Map();\n                addrComponentMap.set(\"street_number\", '');\n                addrComponentMap.set(\"route\", '');\n                addrComponentMap.set(\"postal_code\", '');\n                // These are the possible ways Google will return landmark name\n                addrComponentMap.set(\"premise\", '');\n                addrComponentMap.set(\"establishment\", '');\n                addrComponentMap.set(\"point_of_interest\", '');\n\n                for(let i = 0; i < results.length; i++) {\n                    let resultAddrComponents = results[i].address_components;\n\n                    for(let j = 0; j < resultAddrComponents.length; j++) {\n                        let components = resultAddrComponents[j];\n                        let type = components.types[0];\n\n                        if(addrComponentMap.has(type) && addrComponentMap.get(type) === '') {\n                            addrComponentMap.set(type, components.long_name);\n                        }\n                    }\n                }\n\n                this.onLocationChange(addrComponentMap, location);\n            }\n        })\n    }\n\n    changeProximity(event) {\n        this.setState({\n            proximityRange: event.target.value\n        });\n        this.state.markerRadius.setRadius(parseInt(event.target.value));\n        this.onProximityChange(parseInt(event.target.value));\n    }\n\n\n\n    /* Parent Listeners */\n    onLocationChange(addressComponents, location) {\n        if(this.props.onLocationChange) {\n            this.props.onLocationChange(addressComponents, location);\n        }\n    }\n\n    onProximityChange(proximityValue) {\n        if(this.props.onProximityChange) {\n            this.props.onProximityChange(proximityValue);\n        }\n    }\n\n    onGeocodeSuccess(position) {\n        console.log(position);\n        const latLng = new window.google.maps.LatLng(position.coords.latitude, position.coords.longitude);\n        this.retrieveNearbyFoodPlaces(position.coords.latitude, position.coords.longitude);\n\n\n        /*this.setState({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n        });*/\n    }\n\n    async retrieveNearbyFoodPlaces(latitude, longitude) {\n        const nearbyFoodPlaces = await getNearbyFood(latitude, longitude);\n        const markers = this.state.markers;\n        markers.forEach((marker) => {\n            marker.setMap(null);\n        });\n\n        nearbyFoodPlaces.data.results.forEach(result => {\n            let infoWindow = new window.google.maps.InfoWindow({\n                content: result.name\n            });\n            let marker = new window.google.maps.Marker({\n                map: this.state.map,\n                animation: window.google.maps.Animation.DROP,\n                position: result.geometry.location,\n                title: result.name,\n            });\n            marker.addListener('click', function() {\n                infoWindow.open(marker.getMap(), marker);\n            });\n            markers.push(marker);\n        });\n\n        this.setState({\n            lat: latitude,\n            lng: longitude,\n            markers: markers,\n            nearbyFoodPlaces: nearbyFoodPlaces.data.results\n        }, () => {\n            this.props.onNearbyFoodPlacesChangeListener(nearbyFoodPlaces.data.results);\n        })\n    }\n}\n\nexport default MapView;\n","import React from 'react';\nimport Icon from '@material-ui/core/Icon';\n\nclass ListObject extends React.Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        const { nearbyFoodPlace } = this.props;\n        return (\n            <div className=\"estabContainer\">\n                <h3 className=\"estabName\">{nearbyFoodPlace.name}</h3>\n                <p className=\"estabRating\">{nearbyFoodPlace.rating.toFixed(2)} <Icon style={{ fontSize: 14, color: 'orange' }}>star</Icon></p>\n\n            </div>\n        );\n    }\n}\n\nexport default ListObject;","import React from 'react';\nimport Container from \"@material-ui/core/Container\";\nimport ListObject from \"./ListObject\";\n\nclass ListView extends React.Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        if(!this.props.nearbyFoodPlaces) {\n            return <React.Fragment/>\n        } else {\n            return (\n                <React.Fragment>\n                    <Container className=\"listContainer\">\n                        {\n                            this.props.nearbyFoodPlaces.map(nearbyFoodPlace => <ListObject nearbyFoodPlace={nearbyFoodPlace}/>)\n                        }\n                    </Container>\n                </React.Fragment>\n            )\n        }\n    }\n\n}\n\nexport default ListView;","import React from 'react';\n\nimport { fade,makeStyles } from '@material-ui/core/styles';\n\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { Typography } from '@material-ui/core';\nimport AppBar from \"@material-ui/core/AppBar\";\nimport ToolBar from \"@material-ui/core/Toolbar\";\nimport StarIcon from '@material-ui/icons/Star';\nimport SearchIcon from '@material-ui/icons/Search';\nimport InputBase from '@material-ui/core/InputBase';\nimport { mergeClasses } from '@material-ui/styles';\n\nconst useStyles = makeStyles(theme=>({\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: 200,\n    },\n  }\n}));\n\n\n\n\nexport default function TemporaryDrawer(props) {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  });\n\n  const toggleDrawer = (side, open) => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n\n    setState({ ...state, [side]: open });\n  };\n\n  const sideList = side => (\n    <div\n      className={classes.list}\n      role=\"presentation\"\n      onClick={toggleDrawer(side, false)}\n      onKeyDown={toggleDrawer(side, false)}\n    >\n      <List>\n        {['Favorite'].map((text, index) => (\n          <ListItem button key={text}>\n            <StarIcon style={{marginRight:10}}></StarIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n\n    </div>\n  );\n\n  const fullList = side => (\n    <div\n      className={classes.fullList}\n      role=\"presentation\"\n      onClick={toggleDrawer(side, false)}\n      onKeyDown={toggleDrawer(side, false)}\n    >\n      <List>\n        {['Favorite'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n\n    </div>\n  );\n\n  return (\n    <div>\n      <AppBar position=\"static\" class=\"appBar\">\n                    <ToolBar class=\"toolBar\">\n                    <IconButton  mx=\"2rem\" edge=\"start\" color=\"white\" aria-label=\"Find Food for me\">\n                        <MenuIcon onClick={toggleDrawer('left', true)} style={{color: 'white',marginLeft:15}}  />\n                        <Typography class=\"whiteText\">Find Fud 4 Me</Typography>\n                    </IconButton>\n\n                            <InputBase style={{marginLeft:15}}\n                              placeholder=\"Search…\"\n                              inputProps={{ 'aria-label': 'search' }}\n                                       onChange={event => props.onUserSearchListener(event.target.value)}\n                            />\n\n                      \n                    </ToolBar>\n                </AppBar>\n      <Drawer open={state.left} onClose={toggleDrawer('left', false)}>\n        {sideList('left')}\n      </Drawer>\n\n    </div>\n  );\n}\n\nfunction onUserSearch(searchQuery) {\n  this.props.onUserSearchListener(searchQuery);\n}","import React from 'react';\nimport MapView from \"./MapView\";\nimport Fab from '@material-ui/core/Fab';\nimport ListView from \"./ListView\";\nimport TemporaryDrawer from './TemporaryDrawer';\nimport ListIcon from '@material-ui/icons/List';\n\n\nclass BaseView extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = ({\n            nearbyFoodPlaces: [],\n            userSearch: \"\",\n            showList: false\n        });\n\n        this.onNearbyFoodPlacesChange = this.onNearbyFoodPlacesChange.bind(this);\n        this.onUserSearch = this.onUserSearch.bind(this);\n    }\n\n\n    showList = () =>{\n        console.log(\"setted\")\n        this.setState({\n            showList: !this.state.showList\n        })\n    }\n\n\n    render() {\n        return (\n            <div className=\"AppContainer\">\n                <TemporaryDrawer onUserSearchListener={this.onUserSearch}/>\n\n                {\n                    this.state.showList ? <ListView nearbyFoodPlaces={this.state.nearbyFoodPlaces}/> : null\n                }\n\n                <MapView onNearbyFoodPlacesChangeListener={this.onNearbyFoodPlacesChange} userSearchQuery={this.state.userSearch}/>\n                <div class=\"bottomRightBtn\">\n                <Fab onClick={this.showList} style={{margin:5}} color=\"primary\" aria-label=\"add\"><ListIcon /></Fab>\n                </div>\n\n            </div>\n\n        );\n    }\n\n    onNearbyFoodPlacesChange(nearbyFoodPlaces) {\n        this.setState({\n            nearbyFoodPlaces: nearbyFoodPlaces\n        })\n    }\n\n    onUserSearch(searchString) {\n        this.setState({\n            userSearch: searchString\n        })\n    }\n}\n\nexport default BaseView;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport BaseView from \"./screen/home/BaseView\";\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={BaseView}/>\n        </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}